@using Newtonsoft.Json
@model WareHouseNJsound.Models.RequestViewModel

@{
    ViewBag.Title = "สร้างใบเบิก";
}

<!DOCTYPE html>
<meta charset="utf-8" />
<html lang="en">
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" asp-href-include="~/lib/sweetalert2-11.10.8/package/dist/sweetalert2.css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://unpkg.com/boxicons@2.1.4/dist/boxicons.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Domine:wght@598&family=Noto+Sans+Thai:wght@100..900&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.2.2/dist/select2-bootstrap-5-theme.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>

    <style>
        body {
            font-family: 'Noto Sans Thai', sans-serif;
        }

        .table td, .table th {
            vertical-align: middle;
            font-family: 'Noto Sans Thai', sans-serif;
        }

        .btn-add {
            background-color: #fbc02d;
            color: white;
        }

        .btn-remove {
            background-color: #e53935;
            color: white;
        }

        .select2-container .select2-selection--single {
            height: 38px;
            padding: 6px 12px;
            border: 1px solid #ced4da;
        }

        /* แก้กากบาทที่อยู่ผิดตำแหน่ง */
        .select2-container--bootstrap-5 .select2-selection--single .select2-selection__clear {
            top: 50%;
            transform: translateY(-50%);
            right: 0.75rem;
            position: absolute;
        }

        /* ปรับความสูงให้กล่องดูสวยเหมือน input ทั่วไป */
        .select2-container--bootstrap-5 .select2-selection--single {
            height: calc(2.375rem + 2px); 
            padding: 0.375rem 0.75rem;
            display: flex;
            align-items: center;
        }

        /* ทำให้ข้อความอยู่ตรงกลาง */
        .select2-container--bootstrap-5 .select2-selection__rendered {
            line-height: normal;
        }

    </style>
</head>
<body>
<div class="container mt-4 p-4 bg-light rounded shadow-sm">
    <h1 class="mb-4">สร้างใบเบิกสินค้า</h1>

    <form asp-action="Create" method="post">
        <div class="form-group row">
            @* <label class="col-sm-3 col-form-label" type="hidden">รหัสการเบิก :</label> *@
            <div class="col-sm-9">
                <input asp-for="Request.RequestNumber" type="hidden" />
            </div>
        </div>

        <div class="form-group row mt-2">
            <label class="col-sm-3 col-form-label">ชื่อผู้เบิก :</label>
            <div class="col-sm-9">
                <select id="EmployeeSelect" asp-for="Request.Employee_ID" 
                    asp-items="@(new SelectList(Model.Employees ?? new List<WareHouseNJsound.Models.Employee>(), "Employee_ID", "FullName"))" 
                    class="form-control" required>

                    <option value="">-- เลือกพนักงาน --</option>
                </select>
            </div>
        </div>


            @for (int i = 0; i < Model.RequestDetails.Count; i++)
            {
                <div class="form-group row mt-2">
                    <label class="col-sm-3 col-form-label">ใช้สำหรับงาน :</label>
                    <div class="col-sm-9">
                        <select id="HeaderJobsId" class="form-control" required>
                            <option value="">-- เลือกงาน --</option>
                            @foreach (var j in (ViewBag.Jobs ?? new List<WareHouseNJsound.Models.Jobs>()))
                            {
                                <option value="@j.JobsID">@j.JobsName</option>
                            }
                        </select>
                    </div>
                </div>

            }



        <div class="form-group row mt-2">
            <label class="col-sm-3 col-form-label">วันที่ :</label>
            <div class="col-sm-9">
                <input asp-for="Request.Request_Date" class="form-control" type="date" />
            </div>
        </div>
        

        <hr />

        <h3>รายการสินค้า</h3>


            <table class="table table-bordered text-center" id="itemTable">
                <thead class="table-secondary">
                    <tr>
                        <th style="width:5%;">ลำดับ</th>
                        <th style="width:25%;">อะไหล่</th>
                        <th style="width:12%;">จำนวน</th>
                        <th style="width:12%;">หน่วย</th>
               
                        <th style="width:8%;"></th>
                    </tr>
                </thead>
                <tbody id="tableBody"></tbody>
            </table>


   

        

        <div class="text-center mt-4">
            <button type="submit" class="btn btn-success px-4">บันทึก</button>
            
        </div>
    </form>
</div>
    @section Scripts {
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

        <script id="tmpl-material-options" type="text/template">
            <option value="">-- เลือกอะไหล่ --</option>
            @{
                var mats = ViewBag.Materials as IEnumerable<MaterialOptionDto>
                           ?? Enumerable.Empty<MaterialOptionDto>();
            }
            @foreach (var m in mats)
            {
                <text>
                      <option value="@m.Materials_ID"
                              data-unitid="@m.Unit_ID"
                              data-unitname="@m.UnitName"
                              data-stock="@m.StockLeft">
                        @m.MaterialsName
                      </option>
                </text>
            }

        </script>



        <script>
            let rowCount = 0;

            function createRow(isFirstRow = false) {
                const tr = document.createElement("tr");
                tr.innerHTML = `
                  <td class="row-no"></td>
                  <td>
                    <select class="form-control material-select" name="RequestDetails[0].Materials_ID" required>
                      ${document.getElementById('tmpl-material-options').innerHTML}
                    </select>
                    <!-- hidden ส่งกลับไป DB -->
                    <input type="hidden" class="unit-id" name="RequestDetails[0].Unit_ID" value="0" />
                    <input type="hidden" class="jobs-id" name="RequestDetails[0].Jobs_ID" value="" />
                  </td>
                  <td>
                    <input name="RequestDetails[0].Quantity" type="number" class="form-control qty-input" min="1" step="1" required />
                  </td>
                  <td class="unit-cell">-</td>
                  <td>
                    ${isFirstRow
                        ? `<button type="button" class="btn btn-add btn-sm" onclick="addRow()">+</button>`
                        : `<button type="button" class="btn btn-remove btn-sm" onclick="removeRow(this)">-</button>`}
                  </td>
                `;
                return tr;
            }

            function updateRowNumbers() {
                const rows = document.querySelectorAll("#tableBody tr");
                rows.forEach((tr, i) => {
                    tr.querySelector(".row-no").textContent = i + 1;
                    tr.querySelector(".material-select")?.setAttribute("name", `RequestDetails[${i}].Materials_ID`);
                    tr.querySelector(".unit-id")?.setAttribute("name", `RequestDetails[${i}].Unit_ID`);
                    tr.querySelector(".jobs-id")?.setAttribute("name", `RequestDetails[${i}].Jobs_ID`);
                    tr.querySelector(".qty-input")?.setAttribute("name", `RequestDetails[${i}].Quantity`);
                });
                rowCount = rows.length;
            }

            function addRow() {
                const tbody = document.getElementById("tableBody");
                const tr = createRow(false);
                tbody.appendChild(tr);
                // set Jobs_ID ตามงานด้านบน
                const headerJob = document.getElementById('HeaderJobsId')?.value || '';
                tr.querySelector('.jobs-id').value = headerJob;
                updateRowNumbers();
            }

            function removeRow(btn) {
                btn.closest('tr').remove();
                updateRowNumbers();
            }

            // อัปเดต Unit_ID / ชื่อหน่วยเมื่อเลือกอะไหล่
            document.addEventListener("change", function (e) {
                if (!e.target.classList.contains("material-select")) return;
                const tr = e.target.closest("tr");
                const opt = e.target.selectedOptions[0];
                const unitId = opt ? (opt.getAttribute("data-unitid") || 0) : 0;
                const unitName = opt ? (opt.getAttribute("data-unitname") || "-") : "-";
                tr.querySelector(".unit-id").value = unitId || 0;
                tr.querySelector(".unit-cell").textContent = unitName;

                console.log('DEBUG data-stock =', opt?.getAttribute('data-stock'));
            });

            // เปลี่ยนงานด้านบน -> กระจาย Jobs_ID ทุกแถว
            document.addEventListener("DOMContentLoaded", function () {
                const headerJobs = document.getElementById('HeaderJobsId');
                headerJobs?.addEventListener('change', function () {
                    const val = this.value || '';
                    document.querySelectorAll('#tableBody .jobs-id').forEach(input => input.value = val);
                });

                // แถวแรก
                document.getElementById("tableBody").appendChild(createRow(true));
                const firstJob = headerJobs?.value || '';
                document.querySelector('#tableBody .jobs-id').value = firstJob;
                updateRowNumbers();
            });

            function getStockFromOption(opt) {
                if (!opt) return 0;
                const n = Number(opt.getAttribute("data-stock") || 0);
                return Number.isFinite(n) ? n : 0;
            }


            function collectTotalsAndStocks() {
                const rows = document.querySelectorAll("#tableBody tr");
                const total = new Map();    // Materials_ID -> sum qty
                const stock = new Map();    // Materials_ID -> stock
                const name = new Map();    // Materials_ID -> display name
                const unit = new Map();    // Materials_ID -> unit

                rows.forEach(tr => {
                    const sel = tr.querySelector(".material-select");
                    const qtyEl = tr.querySelector(".qty-input");
                    if (!sel || !qtyEl) return;

                    const id = sel.value?.toString() || "";
                    if (!id) return;

                    const qty = Number(qtyEl.value || 0);
                    const opt = sel.selectedOptions[0];
                    const stk = getStockFromOption(opt);

                    total.set(id, (total.get(id) || 0) + (Number.isFinite(qty) ? qty : 0));
                    stock.set(id, stk);
                    if (!name.has(id)) {
                        name.set(id, (opt?.textContent || "").trim());
                        unit.set(id, opt?.getAttribute("data-unitname") || "");
                    }
                });

                return { total, stock, name, unit };
            }

            function buildShortageHtml(list) {
                let html = `<div class="table-responsive"><table class="table table-sm table-bordered">
                  <thead><tr><th>รหัส</th><th>ชื่อ</th><th>ขอเบิก</th><th>คงเหลือ</th><th>หน่วย</th></tr></thead><tbody>`;
                list.forEach(x => {
                    html += `<tr>
                    <td>${x.id}</td><td>${x.name}</td>
                    <td>${x.req}</td><td>${x.stk}</td><td>${x.unit}</td>
                  </tr>`;
                });
                html += `</tbody></table></div>`;
                return html;
            }

            // ✅ ยืนยันก่อนส่ง + ตรวจความครบถ้วน
            $("form").on("submit", function (e) {
                e.preventDefault();

                // (ของเดิม) ตรวจ required
                let isValid = true;
                $(".form-control").removeClass("is-invalid");
                if (!$('#HeaderJobsId').val()) {
                    $('#HeaderJobsId').addClass('is-invalid');
                    isValid = false;
                }
                $(this).find("input[required], select[required], textarea[required]").each(function () {
                    if (!$(this).val()) { $(this).addClass("is-invalid"); isValid = false; }
                });
                if (!isValid) {
                    Swal.fire({ icon: 'error', title: 'กรอกข้อมูลไม่ครบ', text: 'กรุณากรอกข้อมูลให้ครบทุกช่อง' });
                    return;
                }

                // 🔎 เช็คสต๊อก (ใหม่)
                const { total, stock, name, unit } = collectTotalsAndStocks();
                const shortages = [];
                total.forEach((req, id) => {
                    const stk = stock.get(id) ?? 0;
                    if (req > stk) {
                        shortages.push({ id, req, stk, name: name.get(id) || '-', unit: unit.get(id) || '-' });
                    }
                });
                if (shortages.length > 0) {
                    Swal.fire({
                        icon: 'error',
                        title: 'สต๊อกไม่เพียงพอ',
                        html: buildShortageHtml(shortages),
                        confirmButtonText: 'ตกลง'
                    });
                    return; // ❌ หยุด ไม่ส่งฟอร์ม
                }

                // (ของเดิม) ยืนยันส่ง
                Swal.fire({
                    title: 'ยืนยันส่งใบเบิก?',
                    text: 'ตรวจสอบความถูกต้องก่อนยืนยัน',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonText: 'ยืนยัน',
                    cancelButtonText: 'ยกเลิก'
                }).then((res) => {
                    if (res.isConfirmed) {
                        // sync Jobs_ID อีกรอบ
                        const val = $('#HeaderJobsId').val() || '';
                        document.querySelectorAll('#tableBody .jobs-id').forEach(i => i.value = val);
                        e.target.submit();
                    }
                });
            });


            (function () {
                var html = '@Html.Raw(ViewBag.StockErrorsHtml ?? "")';
                if (html && html.length > 0) {
                    Swal.fire({
                        icon: 'error',
                        title: 'สต๊อกไม่เพียงพอ',
                        html: html,
                        confirmButtonText: 'ตกลง'
                    });
                }
            })();
        </script>
    }


</body>
</html>