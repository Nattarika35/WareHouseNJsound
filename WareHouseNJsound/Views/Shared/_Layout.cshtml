@using Microsoft.AspNetCore.Http
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
   

    <title>WareHouseNJsound</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css"
          rel="stylesheet" integrity="sha384-4Q6Gf2aSP4eDXB8Miphtr37CMZZQ5oXLH2yaXMJ2w8e2ZtHTl7GptT4jmndRuHDT" crossorigin="anonymous">
    <link rel="stylesheet" href="~/css/site.css" />
    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Domine:wght@598&family=Noto+Sans+Thai:wght@100..900&display=swap" rel="stylesheet">

</head>
<body>
    <div class="top-bar">
        <div class="d-flex justify-content-end align-items-center px-3" style="height: 60px;">
            @* 🔔 ปุ่มแจ้งเตือน *@
            <div class="dropdown me-3" id="notifMenu">
                <button class="btn btn-link text-white position-relative p-0"
                        type="button" id="notifDropdown"
                        data-bs-toggle="dropdown" data-bs-display="static" aria-expanded="false" style="line-height:1;">
    <i class='bx bx-bell bx-sm'></i>
                    @* แสดง badge เฉพาะเมื่อมีแจ้งเตือน *@
                    @{
                        var notifCount = (int?)ViewBag.NotificationCount ?? 0;
                        var showBadge = notifCount > 0 ? "" : "d-none";
                    }
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger @showBadge">
                        @notifCount
                        <span class="visually-hidden">unread notifications</span>
                    </span>
                </button>

                <ul class="dropdown-menu dropdown-menu-end shadow" aria-labelledby="notifDropdown" style="min-width:300px;">
                    <li class="dropdown-header fw-semibold">การแจ้งเตือน</li>

                    @{
                        // ถ้าไม่อยากพิมพ์ยาว ใส่ @using WareHouseNJsound.Models ไว้บนสุดของ _Layout ก็ได้
                        var notifs = ViewBag.Notifications as IEnumerable<WareHouseNJsound.Models.Notification>;
                    }

                    @if (notifs != null && notifs.Any())
                    {
                        foreach (var n in notifs)
                        {
                            <li>
                                <a class="dropdown-item small d-flex align-items-start gap-2"
                                   href="@Url.Action("Go","Notifications", new { id = n.Id })">
                                    <i class='bx bx-bell mt-1'></i>
                                    <span>
                                        <div class="fw-semibold">@n.Title</div>
                                        <div class="text-muted small">@n.Message</div>
                                        <div class="text-muted small">@n.CreatedAt.ToString("dd/MM/yyyy HH:mm")</div>
                                    </span>
                                </a>
                            </li>
                        }
                        <li><hr class="dropdown-divider" /></li>
                        <li><a class="dropdown-item text-center" href="@Url.Action("Index","Notifications")">ดูทั้งหมด</a></li>
                    }
                    else
                    {
                        <li><span class="dropdown-item text-muted small">ยังไม่มีการแจ้งเตือน</span></li>
                    }
                </ul>

            </div>

            @* ชื่อ + รูปผู้ใช้เดิม *@
            @{
                var fullName = HttpContextAccessor.HttpContext.Session.GetString("FullName");
                var profileImage = HttpContextAccessor.HttpContext.Session.GetString("ProfileImage") ?? "~/img/default-profile.png";
            }
            @if (!string.IsNullOrEmpty(fullName))
            {
                <div class="d-flex align-items-center">
                    <span class="me-2" style="font-family: 'Noto Sans Thai', sans-serif; color:white; ">@fullName</span>
                    <img src="@Url.Content(profileImage)" alt="Profile"
                         class="rounded-circle" style="width:40px; height:40px; object-fit:cover;" />
                </div>
            }
        </div>
    </div>


    <div class="layout">
        <!-- Sidebar -->
        <nav class="sidebar">

            <div class="menu-bar">
                <ul class="menu-links">

                    @{
                        string currentController = ViewContext.RouteData.Values["Controller"]?.ToString();
                        string currentAction = ViewContext.RouteData.Values["Action"]?.ToString();
                    }
                    @* logo *@
                    <div class="image-text" style="width: 220px; height: auto;">
                        <span class="image" href="#">
                            <img src="~/img/LogoNJsound.png" alt="logo">
                        </span>
                    </div>

                    <li id="Dashboard" class="nav-link" onclick="location.href='@Url.Action("Dashboard", "Request")'">
                        <a href="#" class="@(currentController == "Request" && currentAction == "Dashboard" ? "active" : "")">
                            <i class='icon bx bxs-bar-chart-alt-2'></i><span class="text nav-text" style="font-family: 'Noto Sans Thai', sans-serif;">แดชบอร์ด</span>
                        </a>
                    </li>

                    <li id="Home" class="nav-link" onclick="location.href='@Url.Action("Index", "Home")'">
                        <a href="#" class="@(currentController == "Home" && currentAction == "Index" ? "active" : "")">
                            <i class='icon bx bxs-store-alt'></i><span class="text nav-text" style="font-family: 'Noto Sans Thai', sans-serif;">คลังสินค้า</span>
                        </a>
                    </li>
                    <li id="Requests" class="nav-link" onclick="location.href='@Url.Action("Create", "Request")'">
                        <a href="#" class="@(currentController == "Request" && currentAction == "Create" ? "active" : "")">
                            <i class='icon bx bx-mail-send'></i><span class="text nav-text" style="font-family: 'Noto Sans Thai', sans-serif;">เบิกสินค้า</span>
                        </a>
                    </li>
                    <li id="RequestPending" class="nav-link right-align" onclick="location.href='@Url.Action("PendingRequets", "Request")'">
                        <a href="#" class="@(currentController == "Request" && currentAction == "PendingRequets" ? "active" : "")">
                            <span class="text nav-text" style="font-family: 'Noto Sans Thai', sans-serif;">- รายการเบิก</span>
                        </a>
                    </li>


                    <li id="Admin" class="nav-link" onclick="location.href='@Url.Action("Admin", "Home")'">
                        <a asp-action="Admin" asp-controller="Home" class="@(currentController == "Home" && currentAction == "Admin" ? "active" : "")">
                            <i class='icon bx bxs-user'></i></i><span class="text nav-text" style="font-family: 'Noto Sans Thai', sans-serif;">ผู้ใช้งาน</span>
                        </a>
                    </li>



                    <li id="Employee" class="nav-link" onclick="location.href='@Url.Action("Employee", "Home")'">
                        <a asp-action="Employee" asp-controller="Home" class="@(currentController == "Home" && currentAction == "Employee" ? "active" : "")">
                            <i class='icon bx bxs-user-badge'></i></i><span class="text nav-text" style="font-family: 'Noto Sans Thai', sans-serif;">พนักงาน</span>
                        </a>
                    </li>

                    <li id="Logout" class="nav-link" onclick="location.href='@Url.Action("Index", "Login")'">
                        <a href="#" class="@(currentController == "Login" && currentAction == "Index" ? "active" : "")">
                            <i class='icon bx bx-log-out'></i><span class="text nav-text" style="font-family: 'Noto Sans Thai', sans-serif;">ออกจากระบบ</span>
                        </a>
                    </li>


                </ul>
            </div>

        </nav>
        <div class="d-flex justify-content-end  px-3" style="height: 60px; background-color:aquamarine">
        </div>

        <!-- Main Content -->
        <div class="main-content text-center">
            <main role="main" class="pb-3">
                @RenderBody()
            </main>
        </div>
    </div>

    <!-- โหลดไลบรารี -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-j1CDi7MgGQ12Z7Qab0qlWQ/Qqz24Gc6BM0thvEMVjHnfYGF0rmFCozFSxQBxwHKO"
            crossorigin="anonymous"></script>
    <script src="~/js/site.js"></script>

    <script>
        // ทำเมนู active ฝั่ง client
        document.addEventListener('DOMContentLoaded', () => {
            const navLinks = document.querySelectorAll('.nav-link a');
            navLinks.forEach(link => {
                link.addEventListener('click', () => {
                    navLinks.forEach(n => n.classList.remove('active'));
                    link.classList.add('active');
                });
            });
        });

        // === SignalR Connection ===
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/notifications")
            .withAutomaticReconnect()
            .build();

        // log การเชื่อมต่อ
        connection.onclose(err => console.warn("SignalR closed", err));
        connection.onreconnecting(err => console.warn("SignalR reconnecting", err));
        connection.onreconnected(id => console.log("SignalR reconnected", id));
        const IS_ADMIN = @((User.IsInRole("Admin") ||
            (HttpContextAccessor.HttpContext.Session.GetInt32("Role_ID") == 201)) ? "true" : "false");

        async function startConn() {
            try {
                await connection.start();
                console.log("SignalR connected");
                if (IS_ADMIN === "true") {
                    await connection.invoke("JoinGroup", "Admins");
                }
            } catch (err) {
                console.error("connect error -> retry in 3s", err);
                setTimeout(startConn, 3000);
            }
        }
        startConn();

        // util: สร้าง element พร้อม text (กัน XSS)
        function el(tag, className, text) {
            const e = document.createElement(tag);
            if (className) e.className = className;
            if (text != null) e.textContent = text;
            return e;
        }

        // จำกัดจำนวนรายการใน dropdown
        function trimList(list, max = 10) {
            const items = [...list.querySelectorAll(':scope > li')];
            const dividerIndex = items.findIndex(li => li.querySelector('.dropdown-divider'));
            const notiItems = dividerIndex >= 0 ? items.slice(0, dividerIndex) : items;
            while (notiItems.length > max) {
                const item = notiItems.pop();
                item.remove();
            }
        }

        // รับข้อความจากเซิร์ฟเวอร์
        connection.on("notify", payload => {
            let title, message, link, createdAt, id;
            if (typeof payload === 'string') {
                title = "การแจ้งเตือน";
                message = payload;
                createdAt = new Date();
            } else {
                id = payload.id ?? null;
                title = payload.title ?? "การแจ้งเตือน";
                message = payload.message ?? "";
                link = payload.link ?? "#";
                createdAt = payload.createdAt ? new Date(payload.createdAt) : new Date();
            }

            // อัปเดต badge
            const badge = document.querySelector('#notifDropdown .badge');
            if (badge) {
                const count = (parseInt(badge.textContent) || 0) + 1;
                badge.textContent = count;
                badge.classList.remove('d-none');
            }

            // แทรกรายการล่าสุดใน dropdown
            const list = document.querySelector('ul[aria-labelledby="notifDropdown"]');
            if (list) {
                if (id && list.querySelector(`li[data-id="${id}"]`)) return; // กันซ้ำ

                const li = document.createElement('li');
                if (id) li.dataset.id = id;

                const a = document.createElement('a');
                a.className = 'dropdown-item small d-flex align-items-start gap-2';
                a.href = link || '#';

                const icon = document.createElement('i');
                icon.className = 'bx bx-bell mt-1';

                const spanWrap = document.createElement('span');
                const tTitle = el('div', 'fw-semibold', title);
                const tMsg = el('div', 'text-muted small', message);
                const tTime = el('div', 'text-muted small',
                    `${createdAt.toLocaleDateString('th-TH')} ${createdAt.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })}`);

                spanWrap.appendChild(tTitle);
                spanWrap.appendChild(tMsg);
                spanWrap.appendChild(tTime);

                a.appendChild(icon);
                a.appendChild(spanWrap);
                li.appendChild(a);

                const divider = list.querySelector('.dropdown-divider');
                if (divider) list.insertBefore(li, divider);
                else list.appendChild(li);

                trimList(list, 10);
            }
        });


        // delegate: รองรับหลาย dropdown และโหลด DOM ต่างหน้า
        // helper อ่านค่า token จากฟอร์มซ่อน
        function getCsrf() {
            return document.querySelector('#af-form input[name="__RequestVerificationToken"]')?.value ?? '';
        }

        // delegate: รองรับหลาย dropdown และทำงานทุกหน้า
        document.addEventListener('shown.bs.dropdown', async (e) => {
            // ยิงเฉพาะปุ่มกระดิ่ง
            if (e.target && e.target.id === 'notifDropdown') {
                try {
                    const res = await fetch('/Notifications/MarkAllRead', {
                        method: 'POST',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'RequestVerificationToken': getCsrf()
                        },
                        credentials: 'same-origin' // ส่งคุกกี้ auth ให้ครบ (สำคัญ)
                    });

                    if (res.ok) {
                        const badge = document.querySelector('#notifDropdown .badge');
                        if (badge) {
                            badge.textContent = '0';
                            badge.classList.add('d-none');
                        }
                    } else {
                        console.warn('MarkAllRead not OK:', res.status);
                    }
                } catch (err) {
                    console.warn('MarkAllRead failed', err);
                }
            }
        });
        const csrf = document.querySelector('meta[name="request-verification-token"]')?.content ?? '';
        headers: {
            'X-Requested-With': 'XMLHttpRequest',
                'RequestVerificationToken': csrf
        }

        function getCsrf() {
            return document.querySelector('meta[name="request-verification-token"]')?.content ?? '';
        }

        async function markAllRead() {
            try {
                const res = await fetch('/Notifications/MarkAllRead', {
                    method: 'POST',
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                        'RequestVerificationToken': getCsrf()
                    },
                    credentials: 'same-origin'
                });
                if (res.ok) {
                    console.log("MarkAllRead success");
                } else {
                    console.warn("MarkAllRead failed:", res.status);
                }
            } catch (err) {
                console.error("Error calling MarkAllRead:", err);
            }
        }

    </script>

    @* page-specific scripts from views *@
    @await RenderSectionAsync("Scripts", required: false)

    <form id="af-form" method="post" class="d-none">
        @Html.AntiForgeryToken()
    </form>


</body>
</html>